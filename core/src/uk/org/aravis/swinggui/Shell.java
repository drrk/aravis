package uk.org.aravis.swinggui;

import com.apple.eawt.Application;
import com.apple.eawt.ApplicationAdapter;
import com.apple.eawt.ApplicationEvent;
import org.apache.log4j.Logger;
import uk.org.aravis.Aravis;
import uk.org.aravis.plugin_support.InvalidPluginException;
import uk.org.aravis.plugin_support.PluginFileFilter;
import uk.org.aravis.plugin_support.PluginUtils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.UUID;

public class Shell {

    public Shell() {
        m_frame = new JFrame("Shell");
        m_frame.setContentPane(panel1);
        m_frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        menuBar = new JMenuBar();

        if (!Aravis.is_macos()) {
            JMenu aravisMenu = new JMenu("Aravis");
            aravisMenu.add(new AboutAction());
            aravisMenu.add(new QuitAction());
            menuBar.add(aravisMenu);
        } else {
            Application.getApplication().addApplicationListener(new MacosExtensions());
            Application.getApplication().addAboutMenuItem();
        }
        JMenu pluginsMenu = new JMenu("Plugins");
        pluginsMenu.add(new AddPluginAction());
        menuBar.add(pluginsMenu);


        m_frame.setJMenuBar(menuBar);
        menuBar.setVisible(true);
        m_frame.pack();
        m_frame.setVisible(true);
    }

    private JFrame m_frame;

    private JPanel panel1;
    private JTabbedPane mainTabs;
    private JToolBar mainToolbar;
    private JMenuBar menuBar;

    private HashMap<UUID, Component> m_tabs = new HashMap<UUID, Component>();

    public String addTab(Component c, String title) {
        UUID u = UUID.randomUUID();
        m_tabs.put(u, c);
        mainTabs.add(title, c);
        return u.toString();
    }

    public Component removeTab(String uuid) {
        UUID u = UUID.fromString(uuid);
        Component c = m_tabs.remove(u);
        mainTabs.remove(c);
        return c;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setMinimumSize(new Dimension(450, 250));
        panel1.setPreferredSize(new Dimension(450, 250));
        mainToolbar = new JToolBar();
        panel1.add(mainToolbar, BorderLayout.NORTH);
        mainTabs = new JTabbedPane();
        panel1.add(mainTabs, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }


    //Inner Classes
    private class AddPluginAction extends AbstractAction {
        public AddPluginAction() {
            super("Add Plugin...");
        }

        public void actionPerformed(ActionEvent event) {

            File plugin = selectPluginFile();
            if (plugin != null) {
                try {
                    PluginUtils.getInstance().loadPlugin(plugin, false);
                }
                catch (IOException e) {
                    Logger.getLogger(this.getClass()).debug(e);
                }
                catch (InvalidPluginException e) {
                    Logger.getLogger(this.getClass()).debug(e);
                }
            }
            Logger.getLogger(this.getClass()).debug("Add Plugins");
        }
    }

    private class QuitAction extends AbstractAction {
        public QuitAction() {
            super("Quit Aravis");
        }

        public void actionPerformed(ActionEvent event) {
            Aravis.quit();
        }
    }

    private class AboutAction extends AbstractAction {
        public AboutAction() {
            super("About Aravis...");
        }

        public void actionPerformed(ActionEvent event) {
            About.display();
        }
    }

    /**
     * Create plugin_support selection window and return status
     *
     * @return Collection of files, or null if cancel selected
     */
    File selectPluginFile() {
        FileDialog fileChooser = new FileDialog(m_frame, "Load Plugin");
        fileChooser.setMode(FileDialog.LOAD);
        fileChooser.setFilenameFilter(new PluginFileFilter());
        fileChooser.setVisible(true);
        File plugin = null;
        if (fileChooser.getFile() != null) {
            plugin = new File(fileChooser.getDirectory(), fileChooser.getFile());
        }
        Logger.getLogger(this.getClass()).debug(plugin);

        return plugin;
    }


    private class MacosExtensions extends ApplicationAdapter {
        public void handleAbout(ApplicationEvent event) {
            About.display();
            event.setHandled(true);
        }

        public void handleQuit(ApplicationEvent event) {
            super.handleQuit(event);
            event.setHandled(true);
            Aravis.quit();
        }
    }
}

